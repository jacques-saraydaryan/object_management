/*
 * 
 *      Author: jsaraydaryan
 */

#include <ros/ros.h>
#include <sensor_msgs/Image.h>


#include <math.h> 
#include <cstdlib>
#include <string>
#include <exception>


// Publisher used to send merged images
ros::Publisher merged_topic_pub;
ros::Subscriber sub_topic_1;
ros::Subscriber sub_topic_2;
ros::Subscriber sub_topic_3;

int cameraQueueSize;

void republish_image(const sensor_msgs::ImageConstPtr& msg){
	merged_topic_pub.publish(*msg);
}

void img1Callback(const sensor_msgs::ImageConstPtr& msg){
	republish_image(msg);
}

void img2Callback(const sensor_msgs::ImageConstPtr& msg){
	republish_image(msg);
}

void img3Callback(const sensor_msgs::ImageConstPtr& msg){
	republish_image(msg);
}


/**
 * Main
 */
int main(int argc, char **argv) {

	// Initialize ros and create node handle
	ros::init(argc,argv,"merge_topics_to_one");
	ros::NodeHandle nh;
    
    //ROS_INFO("Param values:");
//
	//if (!ros::param::get("/convert_2d_to_3d/display_marker", display_marker))
	//	{
	//		display_marker=false;
	//	}
	//ROS_INFO("- /convert_2d_to_3d/display_marker: %i",display_marker);


	

	// Publisher
	merged_topic_pub = nh.advertise<const sensor_msgs::ImageConstPtr>("/image_merged", 1);

	//Set of image topic sources
	sub_topic_1= nh.subscribe("/image1", 1, img1Callback);
	sub_topic_2= nh.subscribe("/image2", 1, img2Callback);
	sub_topic_3= nh.subscribe("/image3", 1, img3Callback);

   	ROS_INFO("Ready to merge topic images sources ");
    ros::spin();

}
